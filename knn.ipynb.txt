{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.4"},"colab":{"provenance":[]}},"cells":[{"cell_type":"code","metadata":{"id":"mSi7fY0W2fOL","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1675657292810,"user_tz":-540,"elapsed":23479,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"e0e2c6c0-9d6d-455b-8278-16738327319d"},"source":["from google.colab import files   #train데이터 업로드\n","uploaded = files.upload()"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-54aa8d5d-6bc0-4fc1-aded-0376f4370f60\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-54aa8d5d-6bc0-4fc1-aded-0376f4370f60\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving basketball_train.pkl to basketball_train (1).pkl\n"]}]},{"cell_type":"code","metadata":{"id":"pqmyIM4EFiGG","colab":{"base_uri":"https://localhost:8080/","height":77},"executionInfo":{"status":"ok","timestamp":1675657299030,"user_tz":-540,"elapsed":6228,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"cfa2f209-5c4d-42db-e1e5-2aff610d148a"},"source":["from google.colab import files  #test데이터 업로드\n","uploaded = files.upload()"],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-7791af94-d979-4844-b7ed-18e1f1c1aaf0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-7791af94-d979-4844-b7ed-18e1f1c1aaf0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving basketball_test.pkl to basketball_test (1).pkl\n"]}]},{"cell_type":"code","metadata":{"id":"355lIxok2bq9","executionInfo":{"status":"ok","timestamp":1675657300527,"user_tz":-540,"elapsed":1500,"user":{"displayName":"남윤석","userId":"05799352649806400967"}}},"source":["import pandas as pd\n","import pickle\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T_QF818i2bq-"},"source":["# 데이터 불러오기 (학습 데이터, 테스트 데이터)\n","데이터 분석 단계(4.2_농구선수_데이터분석.ipynb)에서 생성한 농구 선수 포지션 예측하기의  \n","학습 데이터 및 테스트 데이터를 로드합니다."]},{"cell_type":"code","metadata":{"id":"3YPeFDHE2bq_","executionInfo":{"status":"ok","timestamp":1675657300527,"user_tz":-540,"elapsed":5,"user":{"displayName":"남윤석","userId":"05799352649806400967"}}},"source":["with open('basketball_train.pkl', 'rb') as train_data:\n","    train = pickle.load(train_data)                     #train 변수에 80명 샘플 \n","    \n","with open('basketball_test.pkl', 'rb') as test_data:\n","    test = pickle.load(test_data)                       #test 변수에 20명 샘플"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"_mcFKLmhGX9j","executionInfo":{"status":"ok","timestamp":1675657300528,"user_tz":-540,"elapsed":6,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"f38e0f3f-119b-45b8-a13b-558179d86f96"},"source":["train.head()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Player Pos   3P   TRB  BLK\n","94  Denzel Valentine  SG  1.3   2.6  0.1\n","30        Marc Gasol   C  1.4   6.3  1.3\n","95    Nikola Vucevic   C  0.3  10.4  1.0\n","55   Sean Kilpatrick  SG  1.5   4.0  0.1\n","54    Frank Kaminsky   C  1.5   4.5  0.5"],"text/html":["\n","  <div id=\"df-b2766b69-c82a-4fbc-9edf-682bfd8288d8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Player</th>\n","      <th>Pos</th>\n","      <th>3P</th>\n","      <th>TRB</th>\n","      <th>BLK</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>94</th>\n","      <td>Denzel Valentine</td>\n","      <td>SG</td>\n","      <td>1.3</td>\n","      <td>2.6</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>Marc Gasol</td>\n","      <td>C</td>\n","      <td>1.4</td>\n","      <td>6.3</td>\n","      <td>1.3</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>Nikola Vucevic</td>\n","      <td>C</td>\n","      <td>0.3</td>\n","      <td>10.4</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>Sean Kilpatrick</td>\n","      <td>SG</td>\n","      <td>1.5</td>\n","      <td>4.0</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>54</th>\n","      <td>Frank Kaminsky</td>\n","      <td>C</td>\n","      <td>1.5</td>\n","      <td>4.5</td>\n","      <td>0.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2766b69-c82a-4fbc-9edf-682bfd8288d8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b2766b69-c82a-4fbc-9edf-682bfd8288d8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b2766b69-c82a-4fbc-9edf-682bfd8288d8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"l4dH-Vmo2brA"},"source":["# 최적의 k 찾기 (교차 검증 - cross validation)"]},{"cell_type":"code","metadata":{"id":"VjW4uOg62brB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657301937,"user_tz":-540,"elapsed":1413,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"5863e46e-bb6f-426f-acfc-5c674e6e631f"},"source":["# import kNN library\n","from sklearn.neighbors import KNeighborsClassifier   #knn\n","from sklearn.model_selection import cross_val_score  #교차검증\n","\n","# find best k, range from 3 to half of the number of data   #k=3,5,7....39[40]\n","max_k_range = train.shape[0] // 2   #80//2 = 40  몫나눗셈\n","k_list = []\n","for i in range(3, max_k_range, 2):  #(3,40,2),  i=3,5,7,9,....39\n","    k_list.append(i)              #k_lst=[1,3,5,...39] k값 후보 목록\n","\n","cross_validation_scores = []   #k값에 따른 정확도 저장 리스트\n","x_train = train[['3P', 'BLK' , 'TRB']]   #학습에 사용할 특징\n","y_train = train[['Pos']]                #학습에 사용할 레이블\n","\n","# 10-fold cross validation\n","for k in k_list:   # [3,5,7,,,,39]\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    scores = cross_val_score(knn, x_train, y_train.values.ravel(),\n","                             cv=10, scoring='accuracy')\n","    cross_validation_scores.append(scores.mean())\n","\n","print(cross_validation_scores)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.9, 0.9375, 0.9375, 0.9375, 0.925, 0.925, 0.925, 0.925, 0.9, 0.9125, 0.9, 0.8875, 0.8875, 0.8625, 0.8625, 0.8625, 0.8625, 0.85, 0.8375]\n"]}]},{"cell_type":"code","metadata":{"id":"4DjUnHVp2brB","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1675657462961,"user_tz":-540,"elapsed":379,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"f385c12d-2cd1-486c-a314-4edf6a336390"},"source":["# visualize accuracy according to k\n","plt.plot(k_list, cross_validation_scores)\n","plt.xlabel('the number of k')\n","plt.ylabel('Accuracy')\n","plt.show()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"6CV8wIAX2brC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657301939,"user_tz":-540,"elapsed":12,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"eeba9604-b0e2-4082-d263-8db6e10efc54"},"source":["# find best k\n","cvs = cross_validation_scores\n","k = k_list[cvs.index(max(cross_validation_scores))]\n","print(\"The best number of k : \" + str(k) )"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["The best number of k : 5\n"]}]},{"cell_type":"markdown","metadata":{"id":"CgEI1F4x2brC"},"source":["# 2개의 특징으로 예측하기 (3점슛, 블로킹) -> 테스트"]},{"cell_type":"code","metadata":{"id":"tRRVzGVY2brD","executionInfo":{"status":"ok","timestamp":1675657302311,"user_tz":-540,"elapsed":17,"user":{"displayName":"남윤석","userId":"05799352649806400967"}}},"source":["# import libraries\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","\n","knn = KNeighborsClassifier(n_neighbors=11)\n","\n","# select data features\n","x_train = train[['3P', 'BLK']]  #특징\n","# select target value\n","y_train = train[['Pos']]        #레이블\n","\n","# setup knn using train data\n","knn.fit(x_train, y_train.values.ravel())   #fit , 주어진 학습데이터를 이용해서 분류기를 생성\n","\n","# select data feature to be used for prediction\n","x_test = test[['3P', 'BLK']]\n","\n","# select target value\n","y_test = test[['Pos']]\n","\n","# test\n","pred = knn.predict(x_test)   #predict 예측 함수, 테스트 데이터의 특징을 가지고 레이블 예측히여 변수에 저장"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"-Z5Pjbfp2brD","colab":{"base_uri":"https://localhost:8080/","height":677},"executionInfo":{"status":"ok","timestamp":1675657302311,"user_tz":-540,"elapsed":17,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"5f08b5ff-eccf-458c-fe34-1a45169496a4"},"source":["# check ground_truth with knn prediction   #그라운드투르쓰: 테스트데이터의 실제 레이블값\n","comparison = pd.DataFrame(\n","    {'prediction':pred, 'ground_truth':y_test.values.ravel()}) \n","comparison   #변수이름"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   prediction ground_truth\n","0          SG           SG\n","1           C            C\n","2           C            C\n","3          SG           SG\n","4          SG           SG\n","5           C            C\n","6           C            C\n","7          SG           SG\n","8          SG           SG\n","9           C            C\n","10          C            C\n","11         SG           SG\n","12          C            C\n","13         SG           SG\n","14         SG           SG\n","15         SG           SG\n","16         SG           SG\n","17          C            C\n","18          C            C\n","19         SG           SG"],"text/html":["\n","  <div id=\"df-42425c7e-177d-4f2a-a936-e4baf7a8a9fd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>prediction</th>\n","      <th>ground_truth</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42425c7e-177d-4f2a-a936-e4baf7a8a9fd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-42425c7e-177d-4f2a-a936-e4baf7a8a9fd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-42425c7e-177d-4f2a-a936-e4baf7a8a9fd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"63Hf-opf2brE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657302312,"user_tz":-540,"elapsed":16,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"eb37fff5-0ecf-4689-cb7a-fab4feaeade9"},"source":["# check accuracy\n","print(\"accuracy : \"+ \n","          str(accuracy_score(y_test.values.ravel(), pred)) )   #그라운드트루쓰와 예측값을 주고 정확도 수치 계산"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy : 1.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"G6Y7ZM332brE"},"source":["# 3개의 특징으로 예측하기 (3점슛, 블로킹, 리바운드)"]},{"cell_type":"code","metadata":{"id":"nj6firgP2brE","executionInfo":{"status":"ok","timestamp":1675657603246,"user_tz":-540,"elapsed":415,"user":{"displayName":"남윤석","userId":"05799352649806400967"}}},"source":["knn = KNeighborsClassifier(n_neighbors=11)\n","\n","# select data features to be used in train\n","x_train = train[['3P', 'BLK', 'TRB']]\n","# select target\n","y_train = train[['Pos']]\n","\n","# build knn model\n","knn.fit(x_train, y_train.values.ravel())\n","\n","# select features to be used for prediction\n","x_test = test[['3P', 'BLK', 'TRB']]\n","\n","# select target\n","y_test = test[['Pos']]\n","\n","# test\n","pred = knn.predict(x_test)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"N-f1iQA72brF","colab":{"base_uri":"https://localhost:8080/","height":677},"executionInfo":{"status":"ok","timestamp":1675657302313,"user_tz":-540,"elapsed":14,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"079a0915-21d7-4b87-a674-eabd6776acad"},"source":["# check ground_truth with knn prediction\n","comparison = pd.DataFrame(\n","    {'prediction':pred, 'ground_truth':y_test.values.ravel()}) \n","comparison"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   prediction ground_truth\n","0          SG           SG\n","1           C            C\n","2           C            C\n","3          SG           SG\n","4          SG           SG\n","5           C            C\n","6           C            C\n","7           C           SG\n","8          SG           SG\n","9          SG            C\n","10          C            C\n","11         SG           SG\n","12          C            C\n","13         SG           SG\n","14          C           SG\n","15         SG           SG\n","16         SG           SG\n","17          C            C\n","18          C            C\n","19         SG           SG"],"text/html":["\n","  <div id=\"df-732f8489-4c56-45e1-86a4-15cad1abe384\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>prediction</th>\n","      <th>ground_truth</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>C</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>SG</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>C</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>C</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>SG</td>\n","      <td>SG</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-732f8489-4c56-45e1-86a4-15cad1abe384')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-732f8489-4c56-45e1-86a4-15cad1abe384 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-732f8489-4c56-45e1-86a4-15cad1abe384');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"ht7rziRS2brF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675657302314,"user_tz":-540,"elapsed":13,"user":{"displayName":"남윤석","userId":"05799352649806400967"}},"outputId":"50cb83c1-0039-49db-9b87-3f6ef2678e5f"},"source":["# check accuracy\n","print(\"accuracy : \" + \n","          str( accuracy_score(y_test.values.ravel(), pred)) )"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy : 0.85\n"]}]}]}